function isInViewport(element) {
    const rect = element.getBoundingClientRect();
    const isVisible = (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    )
    return isVisible
}

function handlePaginationScroll(maxAttempts = 10) {
    const lastVisitedProduct = sessionStorage.getItem('lastVisitedProduct');

    if (lastVisitedProduct) {
        const $product = $(`.js-product[data-pid=${lastVisitedProduct}`);
        const product = $product[0];

        if (product) {
            setTimeout(() => {
                const productOffset = $product.offset();
                $('html, body').animate({
                    scrollTop: productOffset.top - $('.search-results-header').outerHeight() * 2,
                    scrollLeft: productOffset.left,
                });
                sessionStorage.removeItem('lastVisitedProduct');
            }, 500);
        }
    }
}

  // Hide refinement widgets if no results
function hideFiltersOnEmptyResults (items, container) {
    if (items.length === 0) {
        container.style.display = 'none';
    } else {
        container.style.display = 'block';
    }
}

function customRefinementConnectorFunction(renderOptions, isFirstRender) {
    const { items, refine, createURL, widgetParams } = renderOptions;

    const itemCount = items.filter(item => item.isRefined).length;
    const attribute = `algolia-custom-refinement-${widgetParams.attribute}`;
    const isColorRefinement = widgetParams.attribute === 'colorFamilyCode';

    if (isFirstRender) {
        // Set up default style for the refinement widget
        widgetParams.container.classList.add('card', `algolia-custom-refinement-${widgetParams.attribute}`);
        widgetParams.container.innerHTML = `
        <div class="card-header" id="heading-${attribute}">
            <button type="button" class="toggle-element btn btn-transparent btn-block btn-icon btn-icon--accordion collapsed refinement-title title-${attribute}"
                data-toggle="collapse" data-target="${'#' + attribute + '-body'}" aria-expanded="false" aria-controls="${attribute + '-body'}">
            </button>
        </div>
        <div id="${attribute}-body" class="collapse collapse-product-details" aria-labelledby="heading-${attribute}"
            data-parent="${'#'}refinements-parent">
            <div class="card-body px-0">
                <div id="${attribute}" class="${isColorRefinement ? 'colors-container' : ''}">
                </div>
            </div>
        </div>`;
    }

    // Add number of selected filters to the title with attribute translation
    widgetParams.container.querySelector('.title-' + attribute).innerHTML =
    algoliaData.strings[`${widgetParams.attribute}PanelTitle`] + (itemCount > 0 ? ` <span class="title-counter">(${itemCount})</span>` : '');

    // Add the refinement list based on selected attributes
    widgetParams.container.querySelector(`#${attribute}`).innerHTML =
        items.map(
            item => {
                return isColorRefinement ? `
                    <a class="d-block refinement-link ${item.isRefined ? 'active' : ''} ${widgetParams.attribute}"
                        href="${createURL(item.value)}"
                        data-value="${escapeInput(item.value)}">
                        <div class="lazy__wrapper color-facet-swatch">
                            <img
                                class="lazy__img lazy__img--main lazyload"
                                alt="${algoliaData.strings['facetswatch' + item.label]|| ''}"
                                title="${algoliaData.strings['facetswatch' + item.label]|| ''}"
                                data-src="${algoliaData.staticUrl + 'facetswatch-' + item.label + '.jpg'}"
                            />
                            <span class="lazy__uncollapser lazy__uncollapser--1-1" aria-hidden="true"></span>
                        </div>
                        ${algoliaData.strings['facetswatch' + item.label]}
                    </a>`
                    : `
                    <a class="d-block refinement-link ${item.isRefined ? 'active' : ''} ${widgetParams.attribute}"
                        href="${createURL(item.value)}"
                        data-value="${escapeInput(item.value)}">
                        ${item.label}
                    </a>
                `}
            )
            .join('');

    // Hide refinement widget if no results
    hideFiltersOnEmptyResults(items, widgetParams.container);

    // Add default event listener to each refinement link
    [...widgetParams.container.querySelectorAll('a')].forEach(element => {
        element.addEventListener('click', event => {
            event.preventDefault();
            refine(event.currentTarget.dataset.value);
        });
    });
}

// Escape input to prevent HTML code injection
function escapeInput(str) {
    if (typeof str !== 'string') {
        return str;
    }
    return str.replace(/[&<>"']/g, (match) => {
        switch (match) {
        case '&':
            return '&amp;';
        case '<':
            return '&lt;';
        case '>':
            return '&gt;';
        case '"':
            return '&quot;';
        case '\'':
            return '&#039;';
        default:
            return match;
        }
    });
}

function msgf(label, param){
    return label.replace(algoliaData.strings.placeholderChar, param || '');
}

function enableInstantSearch(config) {
    var initialUiState = {};
    var refinementList = {};
    var filters = '';
    var categoryGender = config.categoryGender;
    var allLookItems = [];

    config.urlQuery = config.urlQuery == 'null' ? '' : config.urlQuery;
    config.categoryDisplayNamePath = config.categoryDisplayNamePath == 'null' ? null : config.categoryDisplayNamePath;
    config.digitalLookBookLink = config.digitalLookBookLink == 'null' ? null : config.digitalLookBookLink;
    config.searchPageRoot = config.searchPageRoot == 'null' ? null : config.searchPageRoot;
    config.splittedCategories = (config.categoryDisplayNamePath || '').split(config.categoryDisplayNamePathSeparator);
    config.deduplicateCategory = config.deduplicateCategory === 'true';

    if (config.isDigital == 'true') {
        if (config.cgid !== 'null' && config.cgid !== '') {
            filters = 'offlineCountryDigital:false OR includeDigitalCategoriesDespiteOffline:'+ config.cgid;
        } else {
            filters = 'offlineCountryDigital:false';
        }
    } else if (config.isVisibleEnabled && config.isAvailableEnabled) {
        filters = 'isVisible:true AND isAvailable:true';
    } else if (config.isVisibleEnabled) {
        filters = 'isVisible:true';
    } else if (config.isAvailableEnabled) {
        filters = 'isAvailable:true';
    }

    if (config.cgid !== 'null' && config.cgid !== '') {
        if (filters) {
            filters += ' AND categoryIds:' + config.cgid;
        } else {
            filters = 'categoryIds:' + config.cgid;
        }
    } else {
        if (filters) {
            filters += ' AND isProductSet:false';
        } else {
            filters = 'isProductSet:false';
        }
    }

    initialUiState[config.productsIndex] = {
        query: config.urlQuery,
        refinementList: refinementList,
    };

    var search = instantsearch({
        indexName: config.productsIndex,
        searchClient: config.searchClient,
        initialUiState: initialUiState,
        insightsClient: window.aa,
        routing: {
            router: history({
                createURL({ qsModule, location, routeState }) {
                    const { origin, pathname, hash } = location;
                    // grab current query string, remove the trailing `?` and convert to object
                    const queryParameters = qsModule.parse(location.search.slice(1)) || {};
                    if (routeState.q == undefined) {
                        delete routeState.q;
                    }
                    if (routeState.page == undefined) {
                        delete routeState.page;
                    }

                    if (Object.keys(routeState).length ) {
                        // merge the search params with the current query params
                        Object.assign(queryParameters, routeState);
                    }

                    let queryString = qsModule.stringify({
                        ...queryParameters,
                    });

                    if(queryString.length){
                      queryString = `?${queryString}`;
                    }

                    return `${origin}${pathname}${queryString}${hash}`;
                },
              }),
            stateMapping: {
              stateToRoute(uiState) {
                const indexUiState = uiState[config.productsIndex] || {};

                return {
                  q: indexUiState.query,
                  page: indexUiState.page,
                  refinementList: indexUiState.refinementList,
                };
              },

              routeToState(routeState) {
                return {
                [config.productsIndex]: {
                    query: routeState.q,
                    page: routeState.page,
                    refinementList: routeState.refinementList,
                  }
                };
              }
            }
          }
        });

    // Create list of widgets for each attribute defined in custom pref Algolia_ListOfFilters
    let widgets = [];
    algoliaData.listOfFilters.forEach((attribute) => {
        const customRefinementConnector = instantsearch.connectors.connectRefinementList( customRefinementConnectorFunction );
        const containerDiv = document.createElement('div');
        widgets.push({
            widget:
                customRefinementConnector({
                    container: containerDiv,
                    attribute: attribute,
                    limit: algoliaData.maxFiltersValuesLength,
                }),
            attribute: attribute,
            container: containerDiv
        });
    });

    // Custom dynamic widgets
    const customDynamicWidgets = instantsearch.connectors.connectDynamicWidgets(
        (renderOptions, isFirstRender) => {
            const {
                attributesToRender,
                widgetParams,
            } = renderOptions;

            if (isFirstRender) {
                const divEl = document.createElement('div');
                widgetParams.container.appendChild(divEl);
            }

            const div = widgetParams.container.querySelector('div');
            div.innerHTML = '';

            // List of attributes to render retrieved from algolia (Configuration -> Facet display)
            attributesToRender.forEach(attribute => {
                const widgetToRender = widgets.find(widget => widget.attribute == attribute)
                if (widgetToRender == undefined || widgetToRender.length === 0) {
                    return;
                }

                const container = widgetToRender.container;
                div.appendChild(container);
            });
        }
    );

    function handleLoadMore() {
        var allProducts = search.renderState[config.productsIndex].stats.nbHits
        var currentPage = search.renderState[config.productsIndex].stats.page + 1
        var totalPages = search.renderState[config.productsIndex].stats.nbPages
        var hitsPerPage = search.renderState[config.productsIndex].stats.hitsPerPage
        var shownProducts = (search.renderState[config.productsIndex].stats.hitsPerPage * currentPage)
        var remainingProducts = (allProducts - shownProducts)
        var disabledClass = 'ais-InfiniteHits-loadMore--disabled'
        var loadMoreBtn = document.querySelector('.ais-InfiniteHits-loadMore')
        var productCounter = document.querySelector('.product-counter')
        var isLookBook = document.getElementsByClassName('lookbook-grid').length > 0;

        if (allProducts > hitsPerPage) {

            if (!productCounter) {
                productCounter = document.createElement('div')
                productCounter.className = 'product-counter products-loading col-12 col-sm-2 my-4 d-block mx-auto text-center small'
                loadMoreBtn.parentNode.insertBefore(productCounter, loadMoreBtn);
            }

            productCounter.innerHTML = shownProducts + ' ' + (isLookBook ? algoliaData.strings.moreResultsOfLookbook : algoliaData.strings.moreResultsOf) + ' ' + allProducts + ' ' + (isLookBook ? algoliaData.strings.moreResultsProductsLookbook : algoliaData.strings.moreResultsProducts);
            loadMoreBtn.innerHTML = isLookBook ? msgf(algoliaData.strings.moreResultsOthersProductsLookbook, remainingProducts)  : msgf(algoliaData.strings.moreResultsOthersProducts, remainingProducts);

            const isLastPage = currentPage === totalPages;
            loadMoreBtn.classList.toggle('d-none', isLastPage || loadMoreBtn.classList.contains(disabledClass));
            loadMoreBtn.classList.toggle('d-block', !isLastPage && !loadMoreBtn.classList.contains(disabledClass));
            if (productCounter) {
                productCounter.classList.toggle('d-none', isLastPage || loadMoreBtn.classList.contains(disabledClass));
                productCounter.classList.toggle('d-block', !isLastPage && !loadMoreBtn.classList.contains(disabledClass));
            }

            $('body').trigger('search:algoliaLoadMore');
        } else {
            loadMoreBtn.classList.remove('d-block');
            loadMoreBtn.classList.add('d-none');
            if (productCounter) {
                productCounter.classList.remove('d-block');
                productCounter.classList.add('d-none');
            }
        }
    }

    function handleUrlPagination() {
        const productTiles = document.querySelectorAll('.product');

        productTiles.forEach(function(productTile) {
            productTile.addEventListener('click', function() {
                const currentPage = productTile.getAttribute('data-current-page');

                // pass product page to pdp
                if (currentPage > 1) {
                    sessionStorage.setItem('lastVisitedPage', currentPage);
                }

                const currentUrl = new URL(window.location.href);
                currentUrl.searchParams.set('page', currentPage);
                history.pushState({}, '', currentUrl);
            });
        });
    }


    // Close modal button with number of results
    const customStats = instantsearch.connectors.connectStats((renderOptions, isFirstRender) => {
        const { nbHits, widgetParams } = renderOptions;

        if (isFirstRender) { return; }

        let countHtml = '';
        if (nbHits >= 1) {
            countHtml += window.translationWithParameters(algoliaData.strings.showNumProducts, [nbHits]);
        } else {
            countHtml += algoliaData.strings.noResults;
        }

        widgetParams.container.innerHTML = countHtml;
    });

    const renderSortBy = (renderOptions, isFirstRender) => {
        const {
          options,
          currentRefinement,
          refine,
          widgetParams,
          canRefine,
        } = renderOptions;
        let select;
        if (isFirstRender) {
          select = document.createElement('ul');
          select.addEventListener('click', event => {
            refine(event.target.parentElement.querySelector('input').id);
            $('.select-button').trigger('click');
          });
          select.classList.add('select-dropdown');
          select.setAttribute("id", "select-dropdown");
          select.setAttribute("role", "listbox")
          widgetParams.container.appendChild(select);
        }
        select = widgetParams.container.querySelector('ul');
        select.disabled = !canRefine;
        select.innerHTML = `
            ${options
              .map(
                option => `
                  <li role="option" class="${option.value === currentRefinement ? 'selected' : ''} js-gtm-sort-by">
                    <input type="radio" id="${option.value}" name="${option.label}" />
                    <label class="small" for="${option.label}">${option.label}</label>
                    ${window.renderIcon('check', '24px', '24px')}
                  </li>
                `
              )
              .join('')}
        `;
      };


    // Create the data attributes for the custom widget
    const createDataAttribtues = refinement =>
        Object.keys(refinement)
        .map(key => `data-${escapeInput(key)}="${escapeInput(refinement[key])}"`)
    .join(' ');

    // Current refinements custom widget
    const customCurrentRefinements = instantsearch.connectors.connectCurrentRefinements(
        (renderOptions) => {
            const { items, refine, widgetParams } = renderOptions;

            widgetParams.container.style.opacity = 0;
            widgetParams.container.style.transform = 'scale(0.9)';
            // Timeout for the animation
            setTimeout(() => {
                widgetParams.container.innerHTML = `
                    ${items.map(item => `
                            ${item.refinements.map(
                                refinement =>
                                // Avoid display of hierarchical refinements (such category) and empty labels
                                refinement.label !== '' && refinement.type !== 'hierarchical' ? `
                                <button ${createDataAttribtues(refinement)} class="btn btn-outline-primary btn-icon btn-icon--right refine-button js-gtm-remove">
                                    ${refinement.attribute === 'colorFamilyCode' ? escapeInput(algoliaData.strings['facetswatch' + refinement.label]) : escapeInput(refinement.label)}
                                    <span class="icon" aria-hidden="true">
                                        ${window.renderIcon('close-round', '12px', '12px')}
                                    </span>
                                </button>` : ''
                            ).join('')}
                    `).join('')}
                `;
                widgetParams.container.style.opacity = 1;
                widgetParams.container.style.transform = 'scale(1)';
                widgetParams.container.innerHTML = widgetParams.container.innerHTML.trim();

                [...widgetParams.container.querySelectorAll('button')].forEach(element => {
                    element.addEventListener('click', event => {
                        const item = Object.keys(event.currentTarget.dataset).reduce(
                            (acc, key) => ({ ...acc, [key]: event.currentTarget.dataset[key],}),{}
                        );
                        refine(item);
                    });
                });
            }, 300);
        }
    );

    // Search results title
    const customQueryResults = instantsearch.connectors.connectStats((renderOptions, isFirstRender) => {
        const {
        nbHits,
        query,
        widgetParams,
        } = renderOptions;

        if (isFirstRender) {
            return;
        }

        let html = '';
        let escapedQuery = escapeInput(query);

        if(!config.categoryDisplayNamePath) {
            // Identify search page
            if(nbHits > 0) {
                // Search page with results
                html +=
                `<div class="search-results-titles text-center mt-6">
                    <p class="small-uppercase">${algoliaData.strings.searchResults}</p>
                    <h1>${nbHits === 1 ? window.translationWithParameters(algoliaData.strings.searchResultFound, [escapedQuery]) :
                        window.translationWithParameters(algoliaData.strings.searchResultsFound, [nbHits, escapedQuery])}</h1>
                </div>`;
            } else {
                // No results search page
                html +=`
                    <form class="position-relative no-results-form mt-8" action="${config.searchPageRoot + (config.searchPageRoot.indexOf('?') > -1 ? `&q=` : `?q=`)}">
                        <input type="text" class="form-control" value="${escapedQuery}" placeholder="${algoliaData.strings.searchPlaceholder}" id="no-results-input" aria-label="${algoliaData.strings.searchPlaceholder}">
                        <button class="no-results-search-icon mr-1" aria-label="${algoliaData.strings.searchPlaceholder}" type="submit">
                            ${window.renderIcon('search', '32px', '32px')}
                        </button>
                    </form>
                    <div class="no-results-text-container text-center pt-9 pt-lg-13">
                        <h3>${algoliaData?.strings?.noresultsTitle?.replace(/&apos;/g, "'")}</h3><br>
                        <p class="lh-24px mb-9 mb-lg-7">${algoliaData.strings.noresultsDesc}</p>
                        <div class="dy-recommendation-section dy-recommendation-section-search"></div>
                    </div>
                `;
            }

            $('#algolia-category-breadcrumb').addClass('d-none');
        }

        if(nbHits === 0) {
            // Hide sticky-filters bar if no results
            $('#product-search-results').addClass('d-none');
        } else if ($('#product-search-results').hasClass('d-none')) {
            $('#product-search-results').removeClass('d-none');
        }

        widgetParams.container.innerHTML = html;
    });

    // Generate a list of big tile items from the given items array based on specific patterns.
    function getBigSetTiles(lookItems, existingItemsLength) {
        // Update a list of all items
        lookItems.forEach((item) => {
            if (!allLookItems.find(obj => obj.name === item.name)) {
                allLookItems.push(item);
            }
        });

        // Generate an array of item indices
        const allItemsIndices = Array.from({ length: allLookItems.length }, (_, index) => index + 1);

        // Define the rules for big tile selection
        const bigTileRules = [
            { offset: 7, modulo: 17 },  // nth-child(17n + 7) selector
            { offset: 8, modulo: 17 },  // nth-child(17n + 8) selector
            { offset: 16, modulo: 31 }, // nth-child(31n + 16) selector
            { offset: 32, modulo: 31 }  // nth-child(31n + 32) selector
        ];

        let bigTileIndices = [];

        // Iterate through each rule and select big tile indices
        bigTileRules.forEach(rule => {
            bigTileIndices = bigTileIndices.concat(
                allItemsIndices.filter((_, index) => (index + 1 - rule.offset) % rule.modulo === 0)
            );
        });

        // exclude already loaded items
        bigTileIndices = bigTileIndices.map(item => item - existingItemsLength);

        // Remove item with value 1
        bigTileIndices = bigTileIndices.filter(item => item > 1);

        // Sort the big tile indices in ascending order
        bigTileIndices.sort((a, b) => a - b);

        return bigTileIndices;
    }

    const customSortBy = instantsearch.connectors.connectSortBy(renderSortBy);
    if (document.querySelector('.ais-InstantSearch')) {
        // Template for the Number of results amount
        const statsConfig = {
            cssClasses: {
                span: 'small'
            },
            templates: {
                text: ''
                    // If it has no result print no result
                    + '{{#hasNoResults}} ' + algoliaData.strings.noResults + ' {{/hasNoResults}} '
                    // else
                    + '{{^hasNoResults}}'
                    // print products label
                    + algoliaData.strings.products
                    // if it has more than one result
                    + '({{#hasManyResults}}{{#helpers.formatNumber}}{{nbHits}}{{/helpers.formatNumber}}{{/hasManyResults}}'
                    // else if it has only one
                    + '{{^hasManyResults}}1{{/hasManyResults}})'
                    + '{{/hasNoResults}}'
            }
        };
        search.addWidgets([
            // Dynamic widgets attributes
            customDynamicWidgets({
                container: document.querySelector('#refinements-parent'),
                widgets: widgets.map(({ widget }) => widget),
            }),
            customStats({
                container: document.querySelector('#button-stats'),
            }),
            customCurrentRefinements({
                container: document.querySelector('#current-refinements'),
            }),
            customCurrentRefinements({
                container: document.querySelector('#current-refinements-plp'),
            }),
            instantsearch.widgets.configure({
                distinct: config.deduplicateCategory,
                hitsPerPage: 4 * 7,
                clickAnalytics: true,
                query: config.urlQuery,
                filters: filters
            }),
            instantsearch.widgets.clearRefinements({
                container: '.js-gtm-reset-all',
                cssClasses: {
                    button: 'btn btn-link',
                    disabledButton: 'disabled'
                },
                templates: {
                    resetLabel: algoliaData.strings.reset
                }
            }),
            // Add the product found amount counter teomplate for Desktop container
            instantsearch.widgets.stats({
                container: '#algolia-stats-placeholder',
                ...statsConfig
            }),
            // Add the product found amount counter teomplate for Mobile container
            instantsearch.widgets.stats({
                container: '#algolia-stats-placeholder-mobile',
                ...statsConfig
            }),
            instantsearch.widgets.stats({
                container: '#algolia-stats-products-number',
                templates: {
                    text: ''
                        + '{{#hasNoResults}} ' + algoliaData.strings.noResults + ' {{/hasNoResults}} '
                        + '{{#hasOneResult}} 1 ' + algoliaData.strings.result + ' {{/hasOneResult}}'
                        + '{{#hasManyResults}} ' + window.translationWithParameters(algoliaData.strings.productsAvailables, ['{{#helpers.formatNumber}}{{nbHits}}{{/helpers.formatNumber}}']) + ' {{/hasManyResults}}'
                }
            }),
            customQueryResults({
                container: document.querySelector('#algolia-stats-products-query-results'),
            }),

            customSortBy({
                container: document.querySelector('#sort-by'),
                items: [
                    {label: algoliaData.strings.bestMetches, value: config.productsIndex},
                    {label: algoliaData.strings.priceAsc, value: config.productsIndexPriceAsc},
                    {label: algoliaData.strings.priceDesc, value: config.productsIndexPriceDesc}
                ],
            }),

            instantsearch.widgets.infiniteHits({
                container: '#algolia-hits-placeholder',
                cssClasses: {
                    root: 'col-12',
                    list: 'row product-grid',
                    item: 'col-6 col-md-3',
                    loadMore: 'btn btn-outline-primary col-12 col-sm-2 my-4 d-block mx-auto products-loading',
                    loadPrevious: 'btn btn-outline-primary col-12 col-sm-2 mb-8 mt-5 mx-auto products-loading'
                },
                showPrevious: true,
                templates: {
                    showMoreText(data, { html }) {
                        return html`
                        <span>${algoliaData.strings.moreResults}</span>
                        `;
                      },
                    showPreviousText: algoliaData.strings.previousResults,
                    empty: '',
                    item: ''
                        + ' <div class="product js-product" '
                        + '     data-pid="{{objectID}}"'
                        + '     data-query-id="{{__queryID}}"'
                        + '     data-index-name="{{__indexName}}"'
                        + '     data-position-index="{{positionIndex}}"'
                        + '     data-current-page="{{__currentPage}}"'
                        + '     {{#helpers.insights}}{ "method": "clickedObjectIDsAfterSearch", "payload": {"eventName": "Click on product"} }{{/helpers.insights}}'
                        + ' >'
                        + '          {{^__isProductSet}}'
                        + '           <button type="submit" class="add-to-wish-list z-index-2 btn-wishlist {{#isProductInWishlist}}added{{/isProductInWishlist}}" '
                        + '             data-href="{{addWishlistUrl}}"'
                        + '             data-remove="{{removeWishlistUrl}}"'
                        + '             data-toggle="modal"'
                        + '             data-target="#wishlist-modal">'
                        +               window.renderIcon('bookmark', '24px', '24px')
                        +               window.renderIcon('bookmark-filled', '24px', '24px')
                        + '           </button>'
                        + '          {{/__isProductSet}}'
                        + '   {{#digitalLookBookLink}}'
                        + '       <a href="{{digitalLookBookLink}}">'
                        + '   {{/digitalLookBookLink}}'
                        + '   {{^digitalLookBookLink}}'
                        + '       <a href="{{url}}">'
                        + '   {{/digitalLookBookLink}}'
                        + '    {{^__isProductSet}}'
                        + '       <div class="product-tile mb-6">'
                        + '    {{/__isProductSet}}'
                        + '    {{#__isProductSet}}'
                        + '       <div class="product-tile product-tile__set">'
                        + '    {{/__isProductSet}}'
                        + '        {{#image}}'
                        + '        <div class="image-container">'
                        + '              <div class="lazy__wrapper">'
                        + '                 {{^__isProductSet}}'
                        + '                     <img class="lazy__img lazy__img--main lazyload" data-src="{{image.dis_base_link}}" alt="{{image.alt}}" title="{{eShopModel}}"/>'
                        + '                     <img class="lazy__img lazy__img--hover lazyload{{secondImageClass}}" data-src="{{secondImage.dis_base_link}}" alt="{{image.alt}}" title="{{eShopModel}}"/>'
                        + '                 {{/__isProductSet}}'
                        + '                 {{#__isProductSet}}'
                        + '                     <img class="lazy__img lazy__img--main lazyload" data-src="{{image.dis_base_link}}" alt="{{image.alt}}" title="{{eShopModel}}" data-gtm-option="{{gtmAttributes.name}}"/>'
                        + '                 {{/__isProductSet}}'
                        + '                <span class="lazy__uncollapser lazy__uncollapser--5-7" aria-hidden="true"></span>'
                        + '              </div>'
                        + '          {{^__isProductSet}}'
                        + '              {{#__label}}'
                        + '                 <span class="product-badge smaller font-italic px-3 px-md-4 pt-3 pt-md-4 pb-1 z-index-2">{{__label}}</span>'
                        + '              {{/__label}}'
                        + '          {{/__isProductSet}}'
                        + '        </div>'
                        + '        {{/image}}'
                        + '        <div class="tile-body z-index-2 col-md-10">'
                        + '          {{^__isProductSet}}'
                        + '            <div class="pdp-link text-center mb-1">'
                        + '                <p class="link small mb-1">'
                        + '                   {{eShopModel}}'
                        + '                </p>'
                        + '                <p class="text-primary text-center small plp-material mb-1">{{eShopMaterial}}</p>'
                        + '            </div>'
                        + '            <div class="price text-center small d-block mb-2">'
                        + '                {{#promotionalPrice}}'
                        + '                    <span class="strike-through list">'
                        + '                         <span class="value"> {{priceLoc}} </span>'
                        + '                    </span>'
                        + '                    <span class="sales">'
                        + '                        <span class="value">'
                        + '                            {{currencySymbol}} {{promotionalPrice}}'
                        + '                        </span>'
                        + '                    </span>'
                        + '                {{/promotionalPrice}}'
                        + '                {{^promotionalPrice}}'
                        + '                {{#priceLoc}}'
                        + '                <span class="sales">'
                        + '                    <span class="value"> {{priceLoc}} </span>'
                        + '                </span>'
                        + '                {{/priceLoc}}'
                        + '                {{/promotionalPrice}}'
                        + '            </div>'
                        + '          {{/__isProductSet}}'
                        + '          {{#__isProductSet}}'
                        + '            <div class="pdp-link text-center mb-1">'
                        + '                <p class="link h1 mb-2">'
                        + '                   {{eShopModel}}'
                        + '                </p>'
                        + '            </div>'
                        // TODO: algolia label
                        + `            <p class="text-primary text-center plp-discover"><span>${algoliaData.strings.discover}</span></p>`
                        + '          {{/__isProductSet}}'
                        + '          {{#__hasVariationGroupsImages}}'
                        + '            <div id="myCarousel" class="color-swatches-plp text-center carousel slide" data-bs-ride="carousel" data-bs-interval="false">'
                        + '               <button class="carousel-control-prev" type="button" data-bs-target="#myCarousel" data-bs-slide="prev">'
                        + '                 <i class="isicon isicon--arrow-left" role="presentation" aria-hidden="true">'
                        + '                     <svg fill="#121010">'
                        + '                         <use xlink:href="/on/demandware.static/Sites-loropiana-b2c-it-Site/-/it_IT/v1701800790436/images/sprite.svg#arrow-left"></use>'
                        + '                     </svg>'
                        + '                 </i>'
                        + '                 <span class="sr-only">Previous</span>'
                        + '               </button>'
                        + '               <div class="swatches-plp d-flex justify-content-center carousel-inner">'
                        + '                 {{#__variationGroupsImages}}'
                        + '                     <div class="carousel-item mx-1">'
                        + '                       <div class="swatch-plp color-value" data-id="{{ID}}" data-main-img="{{swatch_image_main}}" data-hover-img="{{swatch_image_hover}}">'
                        + '                         <img class="d-block" src="{{imagesB1}}" alt="{{image.alt}}"/>'
                        + '                       </div>'
                        + '                     </div>'
                        + '                 {{/__variationGroupsImages}}'
                        + '               </div>'
                        + '               <button class="carousel-control-next" type="button" data-bs-target="#myCarousel" data-bs-slide="next">'
                        + '                 <i class="isicon isicon--arrow-right" role="presentation" aria-hidden="true">'
                        + '                   <svg fill="#121010">'
                        + '                     <use xlink:href="/on/demandware.static/Sites-loropiana-b2c-it-Site/-/it_IT/v1701800790436/images/sprite.svg#arrow-right"></use>'
                        + '                    </svg>'
                        + '                 </i>'
                        + '                 <span class="sr-only">Next</span>'
                        + '               </button>'
                        + '            </div>'
                        + '          {{/__hasVariationGroupsImages}}'
                        + '        </div>'
                        + '      </a>'
                        + '    </div>'
                },
                transformItems: function (items) {
                    var bigTileItemsArr = getBigSetTiles(items, $('.ais-InfiniteHits-item').length);
                    var imageGroup;

                    return items.map(function (item, index) {
                        // assign image
                        item.positionIndex = index + 1;

                        var imageType = item.isProductSet && bigTileItemsArr.includes(item.positionIndex) ? 'LARGE' : 'SMALL';
                        if (typeof(item.image_groups) === "undefined" || item.image_groups === null){
                            item.image = algoliaData.noImages.large;
                        } else {
                            if (item.firstImage) {
                                imageGroup = item.image_groups.find(function (i) {
                                    return i.view_type === item.firstImage
                                });
                            } else {
                                imageGroup = item.image_groups.find(function (i) {
                                    return i.view_type === 'FR'
                                }) || item.image_groups[0];
                            }
                            if (imageGroup) {
                                var imageInGroup = imageGroup.images.find(function (image) {
                                    return image.dis_base_link.indexOf(imageType) > -1;
                                }) || imageGroup.images[0];
                                item.image = imageInGroup
                            }

                            var secondImageGroup;
                            var secondImageClass = '';

                            if (item.firstImage) {
                                secondImageGroup = item.image_groups.find(function (i) {
                                    return i.view_type === 'FR'
                                })|| imageGroup.images[0];
                            } else {
                                if (item.gender === 'U' && categoryGender === 'M') {
                                    secondImageGroup = item.image_groups.find(function (i) {
                                        return i.view_type === 'L1_M'
                                    })
                                }
                                if (item.gender === 'U' && categoryGender === 'W') {
                                    secondImageGroup = item.image_groups.find(function (i) {
                                        return i.view_type === 'L1_W'
                                    })
                                }
                            }

                            if (!secondImageGroup) {
                                secondImageGroup = item.image_groups.find(function (i) {
                                    return i.view_type === 'L1'
                                });

                                if (!secondImageGroup) {
                                    secondImageClass = ' lazy__img--no-hover';
                                    secondImageGroup = item.image_groups.find(function (i) {
                                        return i.view_type === 'FR'
                                    });
                                }
                            }



                            if (secondImageGroup) {
                                var secondImageInGroup = secondImageGroup.images.find(function (image) {
                                    return image.dis_base_link.indexOf(imageType) > -1;
                                }) || secondImageGroup.images[0];
                                item.secondImage = secondImageInGroup;
                                item.secondImageClass = secondImageClass;
                            }
                        }

                        // control of badges and labelOOS
                        if (item.labelOOS) {
                            item.__label = item.labelOOS;
                        } else {
                            item.__label = item.badge;
                        }

                        // color swatches
                        if (config.isDigital == 'true' && item.variationGroupsImagesDigital) {
                            item.__variationGroupsImages = item.variationGroupsImagesDigital;
                            item.__hasVariationGroupsImages = true;
                            item.__variationGroupsImages.forEach(function(variationGroup) {
                                var isCategoryDespiteOffline = variationGroup.digitalCategoriesDespiteOffline.length > 0 && variationGroup.digitalCategoriesDespiteOffline.some((category) => category === config.cgid);
                                if (variationGroup.digitalCategoriesDespiteOffline.length == 0 || isCategoryDespiteOffline) {
                                    var image_FR = variationGroup.imagesFR ? variationGroup.imagesFR.find(function(image) {
                                        return image.indexOf('SMALL') > -1;
                                    }) || null : null;

                                    var image_L1 = variationGroup.imagesL1 ? variationGroup.imagesL1.find(function(image) {
                                        return image.indexOf('SMALL') > -1;
                                    }) || null : null;

                                    variationGroup.swatch_image_hover = image_L1 || image_FR;

                                    variationGroup.swatch_image_main = image_FR || image_L1;
                                } else {
                                    item.__variationGroupsImages.splice(item.__variationGroupsImages.indexOf(variationGroup), 1);
                                }
                            });
                        } else if (item.variationGroupsImages) {
                            item.__variationGroupsImages = item.variationGroupsImages
                            item.__hasVariationGroupsImages = true

                            item.__variationGroupsImages.forEach(function(variationGroup) {

                                var image_FR = variationGroup.imagesFR ? variationGroup.imagesFR.find(function(image) {
                                    return image.indexOf('SMALL') > -1;
                                }) || null : null;

                                var image_L1 = variationGroup.imagesL1 ? variationGroup.imagesL1.find(function(image) {
                                    return image.indexOf('SMALL') > -1;
                                }) || null : null;

                                variationGroup.swatch_image_hover = image_L1 || image_FR;

                                variationGroup.swatch_image_main = image_FR || image_L1;
                            });
                        }

                        // adjusted price in user currency
                        if (item.promotionalPrice && item.promotionalPrice[config.userCurrency] !== null) {
                            item.promotionalPrice = item.promotionalPrice[config.userCurrency]
                        }

                        // price formatted in user currency
                        if (item.price && item.price[algoliaData.currencyCode + '_formatted'] !== null) {
                            item.priceLoc = item.price[algoliaData.currencyCode + '_formatted']
                        } else {
                            item.priceLoc = null;
                        }

                        // price in user currency
                        if (item.price && item.price[config.userCurrency] !== null) {
                            item.price = item.price[config.userCurrency]
                        } else {
                            item.price = null;
                        }

                        if (config.isDigital && item.hidePriceDigital) {
                            item.priceLoc = null;
                        }

                        // currency symbol
                        item.currencySymbol = config.userCurrencySymbol;

                        // product set boolean
                        if (item.isProductSet) {
                            item.__isProductSet = item.isProductSet
                        }

                        item.quickShowUrl = algoliaData.quickViewUrlBase + '?pid=' + item.id;

                        // originating index
                        item.__indexName = config.productsIndex;

                        item.__currentPage = search.renderState[config.productsIndex].stats.page + 1

                        var wishlistIds = config.wishlistIds.split(',');
                        item.isProductInWishlist = false;
                        if (wishlistIds.find((id) => id.includes(item.objectID))) {
                            item.isProductInWishlist = true;
                        }

                        if (config.digitalLookBookLink) {
                            item.digitalLookBookLink = config.digitalLookBookLink.replace('productReplaceId', item.objectID);
                        }
                        return item;
                    });
                }
            })
        ]);
    }

    let infiniteHitsLoaded = false;
    let pageLoaded = false;

    search.start();
    search.on('render', () => {
        const searchData = search.renderState[config.productsIndex];

        if (searchData &&
            searchData.stats &&
            searchData.stats.nbHits > 0) {
            // handle load more logic
            handleLoadMore()
            // handle url pagination
            handleUrlPagination()
            const algoliaEvent = new CustomEvent('algolia:loaded', {'detail' : searchData});
            document.dispatchEvent(algoliaEvent);
            $('body').find('#product-search-results').attr('data-number-of-items', searchData.stats.nbHits);

            if(searchData.infiniteHits?.hits?.length > 0){
                // Display number of products only after algolia is loaded to avoid see full number of products before
                const $algoliaPlaceholder = $('#algolia-stats-placeholder, #algolia-stats-placeholder-mobile');
                if($algoliaPlaceholder.length > 0) {
                    $algoliaPlaceholder.removeClass('invisible')
                }
            }

            // if infinite hits are loaded before page load, handle pagination scroll
            if (searchData.infiniteHits.hits.length > 0 && pageLoaded === false) {
                infiniteHitsLoaded = true;
                setTimeout(function() {
                    handlePaginationScroll();
                }, 300);
            }
        }

        var carouselSwatches = document.querySelectorAll(".color-swatches-plp");

        carouselSwatches.forEach(function(carouselSwatch) {
            var carouselItems = carouselSwatch.querySelectorAll(".carousel-item");
            var carouselControlPrev = carouselSwatch.querySelector(".carousel-control-prev");
            var carouselControlNext = carouselSwatch.querySelector(".carousel-control-next");
            var currentIndex = 0;

            function updateCarousel() {
                carouselItems.forEach(function(item, index) {
                    if (index === currentIndex || (index >= currentIndex + 1 && index < currentIndex + getNumberOfVisibleItems())) {
                        item.classList.add("active");
                    } else {
                        item.classList.remove("active");
                    }

                    carouselControlPrev.style.display = currentIndex > 0 ? "block" : "none";
                    carouselControlNext.style.display = currentIndex + getNumberOfVisibleItems() < carouselItems.length ? "block" : "none";
                });
            }

            function getNumberOfVisibleItems() {
                if (window.innerWidth >= 1200) {
                    return 6;
                } else {
                    return 4;
                }
            }

            window.addEventListener("resize", function() {
                updateCarousel();
            });

            carouselSwatch.addEventListener("click", function(event) {
                event.preventDefault();
            });

            carouselControlPrev.addEventListener("click", function(event) {
                event.preventDefault();
                if (currentIndex > 0) {
                    currentIndex--;
                    updateCarousel();
                }
            });

            carouselControlNext.addEventListener("click", function(event) {
                event.preventDefault();
                if (currentIndex + getNumberOfVisibleItems() < carouselItems.length) {
                    currentIndex++;
                    updateCarousel();
                }
            });

            var swatchColors = carouselSwatch.querySelectorAll('.swatch-plp');
            swatchColors.forEach(function(swatchColor, index) {
                var colorId = swatchColor.getAttribute('data-id');
                var product = swatchColor.closest('.product');

                if (colorId === product.getAttribute('data-pid')) {
                    swatchColor.classList.add('selected');
                    if (index > (swatchColors.length - getNumberOfVisibleItems())) {
                        currentIndex = swatchColors.length - getNumberOfVisibleItems();
                    } else {
                        currentIndex = index;
                    }
                }

                swatchColor.addEventListener('click', function(event) {
                    event.preventDefault();
                    swatchColors.forEach(function(otherSwatchCircle) {
                        if (otherSwatchCircle !== swatchColor) {
                            otherSwatchCircle.classList.remove('selected');
                        }
                    });
                    var oldId = product.getAttribute('data-pid');
                    product.setAttribute('data-pid', colorId);

                    // Change main picture
                    var mainImg = product.querySelector('img.lazy__img--main');
                    mainImg.setAttribute('src', swatchColor.getAttribute('data-main-img'));
                    mainImg.setAttribute('data-src', swatchColor.getAttribute('data-main-img'));

                    // Change hover picture
                    var hoverImg = product.querySelector('img.lazy__img--hover');
                    hoverImg.setAttribute('src', swatchColor.getAttribute('data-hover-img'));
                    hoverImg.setAttribute('data-src', swatchColor.getAttribute('data-hover-img'));
                    swatchColor.classList.add('selected');

                    // Change links
                    var productLinks = product.querySelectorAll('a');
                    productLinks.forEach(function (productLink) {
                        var productHref = productLink.getAttribute('href');
                        var newProductHref = productHref.replace(new RegExp(oldId, 'g'), colorId);
                        productLink.setAttribute('href', newProductHref);
                    });

                    // Change wishlist data
                    var wishlistButton = product.querySelector('.add-to-wish-list');
                    var dataRemoveAttr = wishlistButton.getAttribute('data-remove');
                    var urlParts = dataRemoveAttr.split('?');
                    var queryPart = urlParts[1];
                    var queryParams = queryPart.split('&');
                    for (var i = 0; i < queryParams.length; i++) {
                        if (queryParams[i].startsWith('pid=')) {
                            queryParams[i] = 'pid=' + colorId;
                            break;
                        }
                    }
                    var newQueryPart = queryParams.join('&');
                    var newUrl = urlParts[0] + '?' + newQueryPart;
                    wishlistButton.setAttribute('data-remove', newUrl);

                });

                updateCarousel();
            });
        });


        function setIntratext(){
            const Selectors = {
                $intratext: $('.js-intratext__content'),
                $readLess: $('.js-intratext__read-less'),
                $readMore: $('.js-intratext__read-more'),
            }

            if(!Selectors.$intratext.length) return;

            const maxCharLength = window.breakpoints?.atLeast('lg') ? 112 : 105;

            function readLess(){
                const intratextValue = Selectors.$intratext.data('value');
                let truncateText = '';
                if(intratextValue.length > maxCharLength){
                    truncateText = intratextValue.slice(0, maxCharLength) + '...';
                    Selectors.$readLess.addClass('d-none')
                    Selectors.$readMore.removeClass('d-none')
                    Selectors.$intratext[0].innerText = truncateText;
                } else {
                    Selectors.$intratext[0].innerText = intratextValue;
                    Selectors.$readMore.addClass('d-none')
                }
            }

            function readMore(){
                Selectors.$readMore.addClass('d-none')
                Selectors.$readLess.removeClass('d-none')
                const intratextValue = Selectors.$intratext.data('value');
                Selectors.$intratext[0].innerText = intratextValue;
            }
            readLess()
            Selectors.$readLess.on('click', readLess)
            Selectors.$readMore.on('click', readMore)
        }

        setIntratext()

        // Manage visibility of load more and previous buttons. Display them after products load
        if (search?.renderState[search.indexName]?.infiniteHits?.hits?.length > 0) {
            var classToRemove = 'products-loading';
            document.querySelectorAll(`.${classToRemove}`).forEach(selector => {
                selector.classList.remove(classToRemove);
            });
        }
    });

    // if page is ready before infinite hits are loaded, handle pagination scroll
    window.onload = function() {
        if (infiniteHitsLoaded === false) {
            pageLoaded = true;
            setTimeout(function() {
                handlePaginationScroll();
            }, 300);
        }
    }
}

