/* global autocomplete, getAlgoliaResults, html, algoliaData  */
function enableAutocomplete(config) {
    let dySearchEmpty = null, dySearchRedirect = null;
    const inputElements = document.querySelectorAll('#aa-search-input');

    const index = config.searchClient.initIndex(config.productsIndex);

    let filters = '';

    if (config.isVisibleEnabled && config.isAvailableEnabled) {
        filters = 'isVisible:true AND isAvailable:true';
    } else if (config.isVisibleEnabled) {
        filters = 'isVisible:true';
    } else if (config.isAvailableEnabled) {
        filters = 'isAvailable:true';
    }

    const filterAndOrderColors = (SBColorFilterAndOrder, facets) => {
        let facetsOrdered = SBColorFilterAndOrder.filter(function (facet) {
            return facets.includes(facet);  // filter out the facets that are not in the SBColorFilterAndOrder
        });

        if (facetsOrdered.length < 1) {
            facetsOrdered = facets;
        }

        return facetsOrdered;
    }

    inputElements.forEach(function (inputElement) {
        autocomplete({
            container: inputElement,
            openOnFocus: false,
            classNames: {
                // d-block permits to force "display: block", because SFCC's main.js script sets our panel to "display: none" when clicking again in the input
                panel: "algolia-autocomplete suggestions d-block",
                sourceHeader: "autocomplete-header",
                item: "autocomplete-item"
            },
            placeholder: algoliaData.strings.searchPlaceholder,
            detachedMediaQuery: 'none',
            onSubmit() {
                $(document).trigger('autocomplete:submitForm', { ...config });
            },
            onStateChange({prevState, state, setIsOpen, setQuery}) {
                const inputVal = $('#aa-search-input .aa-Input').val();
                if(prevState.query !== state.query){
                    // Query changed
                    window.updatingQuery = true;
                    if(state.query.length > 0) {
                        $(document).trigger('autocomplete:showResults');
                    } else {
                        $(document).trigger('autocomplete:showStaticContainer');
                    }
                }
                if(!window.updatingQuery && prevState.isOpen !== state.isOpen){
                    // Prevent closing clicking outside the autocomplete panel
                    setIsOpen(state.query.length > 0);
                }
                if(inputVal !== state.query){
                    // Prevent clear input when autofill with microphone
                    setQuery(inputVal);
                }

                // Save the redirect link in the input data attribute to use it clicking on search button
                const redirectLink = $('.redirect-link').attr('href');
                const $searchInput = $('#aa-search-input');
                if(redirectLink) {
                    $searchInput.attr('data-redirect', redirectLink);
                } else {
                    $searchInput.removeAttr('data-redirect');
                }
            },
            getSources({
                query,
                setContext,
            }) {
                return index.search('', {
                    facets: ['primary_category_path', 'primary_category_url'],
                    query: query,
                    maxValuesPerFacet: 5,
                    filters:  filters ? filters + ' AND isProductSet:false' : 'isProductSet:false',
                })
                .then((results) => {
                    return [{
                            sourceId: 'products',
                            getItems({
                                query
                            }) {
                                return getAlgoliaResults({
                                    searchClient: config.searchClient,
                                    queries: [{
                                        indexName: config.productsIndex,
                                        query: query,
                                        params: {
                                            // TODO to understand how to get full results
                                            hitsPerPage: 5,
                                            distinct: false,
                                            filters: filters ? filters + ' AND isProductSet:false' : 'isProductSet:false',
                                            clickAnalytics: true,
                                        },
                                    }, ],
                                    transformResponse({ results, hits }) {
                                        setContext({
                                          nbHits: results[0].nbHits,
                                          userData: results[0].userData,
                                        });
                                        return hits;
                                      }
                                });
                            },
                            templates: {
                                header({ state, html }) {
                                    // TODO to understand how to get full results
                                    return html `<div class="small-uppercase">
                                            ${window.translationWithParameters(algoliaData.strings.productsNum, [state.context.nbHits || 0])}
                                        </div>`;
                                },
                                item({
                                    item,
                                    html
                                }) {
                                    if (typeof (item.image_groups) === "undefined") {
                                        item.firstImage = algoliaData.noImages.small;
                                    } else {
                                        if(item.image_groups && item.image_groups.length > 0) {
                                            var frImageGroup = item.image_groups.find(function (imageGroup) {
                                                return imageGroup.view_type === "FR"
                                            });
                                            item.firstImage = frImageGroup?.images?.find(function (image) {
                                                return image.dis_base_link.indexOf('SMALL') > -1;
                                            }) || (imageGroup ? imageGroup?.images[0] : '');
                                        }
                                    }

                                    return html `
                                        <a class="algolia-product js-gtmProduct d-flex flex-column text-decoration-none text-center mb-6" href="${item.url}"
                                            data-pid="${item.objectID}"
                                            data-name="${item.gtmAttributes.name}"
                                            data-variant="${item.objectID}"
                                            data-macro-offer="${item.gtmAttributes.macroOfferDesc}"
                                            data-offer="${item.gtmAttributes.offerDesc}"
                                            data-item_category="${item.gtmAttributes.category1}"
                                            data-item_category2="${item.gtmAttributes.category2}"
                                            data-item_category3="${item.gtmAttributes.category3}"
                                            data-item_category4="${item.primary_category_id}"
                                            data-item_seasonality="${item.gtmAttributes.seasonality}"
                                            data-item_order_type="${item.gtmAttributes.orderType}"
                                            data-index="${item.__autocomplete_id}"
                                            >
                                            <img class="autocomplete-item__image w-100" src=${item?.firstImage?.dis_base_link}></img>
                                            <p class="small text-dark pt-3 pt-lg-5 mb-1">${item.eShopModel}</p>
                                            <span class="small">${item.eShopMaterial}</span>
                                        </a>`;
                                },
                                footer({ state, html}) {
                                    return html `<a class="btn btn-outline-primary see-all-results mt-4" href="#">
                                            ${window.translationWithParameters(algoliaData.strings.seeAllResults, [state.context.nbHits || 0])}
                                        </a>`;
                                },
                            },
                        },
                        {
                            sourceId: 'categories',
                            getItems({
                                query
                            }) {
                                var primaryCategories = [];
                                if (results &&
                                    results.facets &&
                                    Object.prototype.hasOwnProperty.call(results.facets, 'primary_category_url') &&
                                    Object.prototype.hasOwnProperty.call(results.facets, 'primary_category_path')) {

                                        var categoryUrls = Object.keys(results.facets.primary_category_url);
                                        var categoryPaths = Object.keys(results.facets.primary_category_path);
                                        categoryUrls.forEach((categoryUrl, i) => {
                                            primaryCategories.push({
                                                url: categoryUrl,
                                                name: categoryPaths[i]
                                            });
                                        });
                                    }
                                    return primaryCategories;
                                },
                            templates: {
                                header({items, html}) {
                                    return html `<div class="small-uppercase">
                                        ${window.translationWithParameters(algoliaData.strings.categoriesNum, [items.length])}
                                    </div>`;
                                },
                                item({
                                    item,
                                    html
                                }) {
                                    return html `
                                        <div class="text-truncate text-nowrap">
                                            <a href=${item.url}>${item.name}</a>
                                        </div>`;
                                },
                            },
                        },
                    ];
                })
            },

            render({ elements, render, html }, root) {
                const {products, categories} = elements;

                window.updatingQuery = false;

                if (dySearchEmpty === null) {
                    dySearchEmpty = root.querySelector('.dy-recommendation-section-search .dy_unit');
                }
                if (dySearchRedirect === null) {
                    dySearchRedirect = root.querySelector('.dy-recommendation-section-search-redirect .dy_unit');
                }

                if (dySearchEmpty !== null) {
                    dySearchEmpty.classList.add('d-none');
                    dySearchEmpty.classList.remove('dy-auto-embedder');
                }
                if (dySearchRedirect !== null) {
                    dySearchRedirect.classList.add('d-none');
                    dySearchRedirect.classList.remove('dy-auto-embedder');
                }
                render(
                    html`<div class="aa-PanelLayout aa-Panel--scrollable">
                    <div class="aa-PanelSections d-flex flex-column-reverse flex-lg-row">
                        <div class="aa-PanelSection--left">
                            ${categories}
                        </div>
                        <div class="aa-PanelSection--right pl-lg-9 pt-1">
                            ${products}
                        </div>
                    </div>
                    </div>`,
                    root
                );
            },

            renderNoResults({ render, html, state }, root) {
                if (dySearchEmpty === null) {
                    dySearchEmpty = root.querySelector('.dy-recommendation-section-search .dy_unit');
                }
                if (dySearchRedirect === null) {
                    dySearchRedirect = root.querySelector('.dy-recommendation-section-search-redirect .dy_unit');
                }

                const userData = state.context.userData;
                if(userData && userData.length > 0){
                    if (dySearchEmpty !== null) {
                        dySearchEmpty.classList.add('d-none');
                        dySearchEmpty.classList.remove('dy-auto-embedder');
                    }
                    if (dySearchRedirect !== null) {
                        dySearchRedirect.classList.remove('d-none');
                        dySearchRedirect.classList.add('dy-auto-embedder');
                    }

                    // User data setted with algolia rules to return custom links typing specific words
                    let listOfLinks = userData.map((item) => {
                        const label = item[`label.${config.currentLocale === "zh_HK" ? config.currentLocale : config.currentLanguage}`];
                        const redirect = item[`redirect.${config.currentLocale === "zh_HK" ? config.currentLocale : config.currentLanguage}`];
                        return label && redirect ? `<li class="aa-Item autocomplete-item" role="option"><div class="text-truncate text-nowrap"><a class="redirect-link" href="${redirect}">${label}</a></div></li>` : '';
                    }).join(', ');

                    render(
                        html `<div class="aa-PanelLayout aa-Panel--scrollable">
                            <div class="aa-PanelSections d-flex flex-column-reverse flex-lg-row">
                                <div class="aa-PanelSection--left">
                                    <section class="aa-Source show-elements" data-autocomplete-source-id="categories">
                                        <div class="aa-SourceHeader autocomplete-header">
                                            <div class="small-uppercase">${algoliaData.strings.redirectUrlTitle}</div>
                                        </div>
                                        <ul class="aa-List redirect-url" role="listbox"></ul>
                                    </section>
                                </div>
                                <div class="aa-PanelSection--right pl-lg-9 pt-1">
                                    <div class="dy-recommendation-section dy-recommendation-section-search-redirect"></div>
                                </div>
                            </div>
                            </div>`,
                    root);

                    $('.redirect-url').html(listOfLinks);
                } else {
                    if (dySearchEmpty !== null) {
                        dySearchEmpty.classList.remove('d-none');
                        dySearchEmpty.classList.add('dy-auto-embedder');
                    }
                    if (dySearchRedirect !== null) {
                        dySearchRedirect.classList.add('d-none');
                        dySearchRedirect.classList.remove('dy-auto-embedder');
                    }

                    render(
                        html`
                          <div class="aa-PanelLayout aa-Panel--scrollable text-center pt-9 pt-lg-14">
                              <h3>${algoliaData.strings.noresultsTitle.replace(/&apos;/g, "'")}</h3><br></br>
                              <p class="lh-24px mb-9 mb-lg-7">${algoliaData.strings.noresultsDesc}</p>
                              <div class="dy-recommendation-section dy-recommendation-section-search"></div>
                          </div>
                        `,
                        root
                    )
                }
              },
        })

    });

    //mix instant search in autocomplete
    var search = instantsearch({
        indexName: config.productsIndex,
        searchClient: config.searchClient,
        insightsClient: window.aa
    });

    if (document.querySelector('.search-menu__static-container')) {
        search.addWidgets([
            instantsearch.widgets.configure({
                distinct: true,
                hitsPerPage: 6,
                filters: filters ? filters + ' AND isProductSet:false' : 'isProductSet:false',
                clickAnalytics: true
            }),
            instantsearch.widgets.hits({
                container: '#most-loved-products .product-list',
                cssClasses: {
                    list: 'row product-grid',
                    item: 'col-6 col-sm-4',
                },
                templates: {
                    empty: '',
                    item: `<a class="algolia-product js-gtmProduct d-flex flex-column text-decoration-none text-center mb-6" href="{{url}}"
                            data-pid="{{objectID}}"
                            data-name="{{gtmAttributes.name}}"
                            data-variant="{{objectID}}"
                            data-macro-offer="{{gtmAttributes.macroOfferDesc}}"
                            data-offer="{{gtmAttributes.offerDesc}}"
                            data-item_category="{{gtmAttributes.category1}}"
                            data-item_category2="{{gtmAttributes.category2}}"
                            data-item_category3="{{gtmAttributes.category3}}"
                            data-item_category4="{{primary_category_id}}"
                            data-item_seasonality="{{gtmAttributes.seasonality}}"
                            data-item_order_type="{{gtmAttributes.orderType}}"
                            >
                            <img class="autocomplete-item__image w-100" src={{image.dis_base_link}}></img>
                            <p class="small text-dark pt-3 mb-1">{{eShopModel}}</p>
                            <span class="small">{{eShopMaterial}}</span>
                          </a>`
                },
                transformItems: function (items) {
                    return items.map(function (item) {
                        // assign image
                        if (typeof(item.image_groups) === "undefined"){
                            item.image = algoliaData.noImages.large;
                        } else {
                            if (item.image_groups && item.image_groups.length > 0) {
                                var imageGroup = item.image_groups && item.image_groups.find(function (i) {
                                return i.view_type === 'FR'
                                }) || item.image_groups[0];
                                if (imageGroup) {
                                    var imageInGroup = imageGroup.images.find(function (image) {
                                        return image.dis_base_link.indexOf('SMALL') > -1;
                                    }) || imageGroup.images[0];
                                    item.image = imageInGroup
                                }
                            } else {
                                item.image = algoliaData.noImages.large;
                            }
                        }

                        // adjusted price in user currency
                        if (item.promotionalPrice && item.promotionalPrice[config.userCurrency] !== null) {
                            item.promotionalPrice = item.promotionalPrice[config.userCurrency]
                        }

                        // price in user currency
                        if (item.price && item.price[config.userCurrency] !== null) {
                            item.price = item.price[config.userCurrency]
                        }

                        // currency symbol
                        item.currencySymbol = config.userCurrencySymbol;


                        item.quickShowUrl = algoliaData.quickViewUrlBase + '?pid=' + item.id;

                        // originating index
                        item.__indexName = config.productsIndex;

                        return item;
                    });
                }
            }),
            instantsearch.widgets
            .index({ indexName: config.categoriesIndex })
            .addWidgets([
                instantsearch.widgets.configure({
                    distinct: true,
                    hitsPerPage: 6,
                    clickAnalytics: true,
                    filters: '',
                    facetFilters: ['customRule:mostLovedCategory']
                }),
                instantsearch.widgets.hits({
                    container: '#most-searched-categories .search-menu__text-list',
                    templates: {
                    item:
                        '<a href="{{url}}" class="search-menu__text-link" data-category-id={{objectID}} data-default-category-name="{{gtmName}}">{{name}}</a>',
                    },
                }),
            ]),
        ]);

        search.start();

        // Create list of arrays (from single array) based on chunk size
        // Example: groupByChunk([1,2,3,4,5,6,7,8,9,10], 3) => [[1,2,3], [4,5,6], [7,8,9], [10]]
        const groupByChunk = (arr, chunkSize) => {
            const maxLength = Math.ceil(arr.length / chunkSize);
            const tempArray = Array.from(arr);
            return Array.from({length: maxLength}, () =>  tempArray.splice(0,chunkSize));
        }

        const getColorFacetHtml = (facet, colorLink) => {
            return `
            <div class="lazy__wrapper color-facet-swatch">
                <img
                    class="lazy__img lazy__img--main lazyload"
                    alt="${facet|| ''}"
                    title="${facet|| ''}"
                    data-src="${colorLink}"
                />
                <span class="lazy__uncollapser lazy__uncollapser--1-1" aria-hidden="true"></span>
            </div>
            <p class="smaller pt-4 m-0 facet-label">${algoliaData.strings['facetswatch' + facet]}</p>`
        }

        //MAN colors
        index.search('', {
            facets: ['colorFamilyCode'],
            filters: filters ? filters + ' AND gender: M' : 'gender: M'
        }).then((result) => {
            const colorFacetsList = [];
            let facets = result.facets && result.facets.colorFamilyCode ? Object.keys(result.facets.colorFamilyCode) : [];
            let SBColorFilterAndOrder = config.SBColorFilterAndOrderMen;
            let facetsOrdered = filterAndOrderColors(SBColorFilterAndOrder, facets);

            facetsOrdered.forEach((facet) => {
                let colorContainer = document.createElement('a');
                colorContainer.className = "color-facet-link text-decoration-none text-dark mb-6";
                colorContainer.href = config.categoryMen + `/?${encodeURIComponent('refinementList[colorFamilyCode][0]') + '=' + facet}`;
                colorContainer.title = facet;
                var colorLink = algoliaData.staticUrl + 'facetswatch-' + facet + '.jpg';
                colorContainer.innerHTML = getColorFacetHtml(facet, colorLink);
                colorFacetsList.push(colorContainer);
            });
            const desktopGroupedColorFacets = groupByChunk(colorFacetsList, 15);
            const mobileGroupedColorFacets = groupByChunk(colorFacetsList, 8);


            let itemsContainerMobile = document.querySelector('#color-list-man .color-list-mobile .swiper-wrapper');
            mobileGroupedColorFacets.forEach((facetGroup) => {
                let slideContainerMobile = document.createElement('div');
                slideContainerMobile.className = "swiper-slide";
                facetGroup.forEach((facetHtml) => {
                    slideContainerMobile.appendChild(facetHtml.cloneNode(true));
                });
                itemsContainerMobile.appendChild(slideContainerMobile);
            });

            let itemsContainerDesktop = document.querySelector('#color-list-man .color-list-desktop .swiper-wrapper');
            desktopGroupedColorFacets.forEach((facetGroup) => {
                let slideContainer = document.createElement('div');
                slideContainer.className = "swiper-slide";
                facetGroup.forEach((facetHtml) => {
                    slideContainer.appendChild(facetHtml.cloneNode(true));
                });
                itemsContainerDesktop.appendChild(slideContainer);
            });
        });

        //WOMAN colors
        index.search('', {
            facets: ['colorFamilyCode'],
            filters: filters ? filters + ' AND gender: W' : 'gender: W'
        }).then((result) => {
            const colorFacetsList = [];
            let facets = result.facets && result.facets.colorFamilyCode ? Object.keys(result.facets.colorFamilyCode) : [];
            let SBColorFilterAndOrder = config.SBColorFilterAndOrderWom;
            let facetsOrdered = filterAndOrderColors(SBColorFilterAndOrder, facets);

            facetsOrdered.forEach((facet) => {
                let colorContainer = document.createElement('a');
                colorContainer.className = "color-facet-link text-decoration-none text-dark mb-6";
                colorContainer.href = config.categoryWom + `/?${encodeURIComponent('refinementList[colorFamilyCode][0]') + '=' + facet}`;
                colorContainer.title = facet;
                var colorLink = algoliaData.staticUrl + 'facetswatch-' + facet + '.jpg';
                colorContainer.innerHTML = getColorFacetHtml(facet, colorLink);
                colorFacetsList.push(colorContainer);
            });
            const desktopGroupedColorFacets = groupByChunk(colorFacetsList, 15);
            const mobileGroupedColorFacets = groupByChunk(colorFacetsList, 8);


            let itemsContainerMobile = document.querySelector('#color-list-woman .color-list-mobile .swiper-wrapper');
            mobileGroupedColorFacets.forEach((facetGroup) => {
                let slideContainerMobile = document.createElement('div');
                slideContainerMobile.className = "swiper-slide";
                facetGroup.forEach((facetHtml) => {
                    slideContainerMobile.appendChild(facetHtml.cloneNode(true));
                });
                itemsContainerMobile.appendChild(slideContainerMobile);
            });

            let itemsContainerDesktop = document.querySelector('#color-list-woman .color-list-desktop .swiper-wrapper');
            desktopGroupedColorFacets.forEach((facetGroup) => {
                let slideContainer = document.createElement('div');
                slideContainer.className = "swiper-slide";
                facetGroup.forEach((facetHtml) => {
                    slideContainer.appendChild(facetHtml.cloneNode(true));
                });
                itemsContainerDesktop.appendChild(slideContainer);
            });
        });
    }
}
