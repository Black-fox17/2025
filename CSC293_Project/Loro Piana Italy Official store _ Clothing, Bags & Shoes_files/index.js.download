/* global algoliasearch */

document.addEventListener('DOMContentLoaded', function () {
    var $suggestionsWrapper = $('#suggestions-wrapper');
    var $productSearchResults = $('#product-search-results');
    var $wishlistIds = $('#wishlist-ids')
    var $plpProductList = $('.plp-product-list');

    var userCurrency = algoliaData.currencyCode;
    var userCurrencySymbol = algoliaData.currencySymbol;
    var categoryDisplayNamePath = $suggestionsWrapper.attr('data-category-display-name-path');  // path of the current category
    var categoryDisplayNamePathSeparator = $suggestionsWrapper.attr('data-category-display-name-path-separator'); // separator used to serialize the category path (by default: '>')
    var cgid = $suggestionsWrapper.attr('data-category');  // id of the current category
    var cgidSeason = $plpProductList.attr('data-category-id');  // id of the current category
    var urlQuery = $suggestionsWrapper.attr('data-q'); // onload search query - for search page - URL param: q
    var searchPageRoot = $suggestionsWrapper.attr('data-search-page-root'); // onload search query - for search page - URL param: q
    var colorDisplayName = $suggestionsWrapper.attr('data-color-display-name'); // searched color
    var wishlistIds = $wishlistIds.attr('data-wishlist-ids'); // wishlist product ids
    var digitalLookBookLink = $productSearchResults.attr('data-digital-lookbook-link'); // digital lookbook base link for products
    var SBColorFilterAndOrderMen = algoliaData.SBColorFilterAndOrderMen; // color filter and order
    var SBColorFilterAndOrderWom = algoliaData.SBColorFilterAndOrderWom; // color filter and order
    var categoryMen = $suggestionsWrapper.attr('data-category-men');
    var categoryWom = $suggestionsWrapper.attr('data-category-wom');
    var isVisibleEnabled = algoliaData.isVisibleEnabled;
    var isAvailableEnabled = algoliaData.isAvailableEnabled;
    var categoryGender = $suggestionsWrapper.attr('data-category-gender');
    var isFirstLevelDigital = $suggestionsWrapper.attr('data-is-first-level-digital');
    var isDigital = $suggestionsWrapper.attr('data-is-digital');
    var currentLanguage = algoliaData.currentLanguage;
    var currentLocale = algoliaData.locale;
    var deduplicateCategory = $suggestionsWrapper.attr('data-deduplicate-category');

    var productsIndex = algoliaData.productsIndex;
    var productsIndexPriceAsc = productsIndex + '_price_asc';
    var productsIndexPriceDesc = productsIndex + '_price_desc';

    var categoriesIndex = algoliaData.categoriesIndex;

    var searchClient = algoliasearch(algoliaData.applicationID, algoliaData.searchApiKey);
    searchClient.addAlgoliaAgent('Algolia Salesforce B2C (SFRA)', 'v' + algoliaData.version);

    // Render icons function (similar to the one in js/utils/resource.js). This file is static and we cannot call our function
    window.renderIcon = function(symbol, height, width = 24, cssClasses = []) {
        return `<i class="isicon isicon--${symbol} ${cssClasses.join(' ')}" style="width: ${width}; height: ${height || width};" role="presentation" aria-label="${symbol}" aria-hidden="true">
                    <svg style="width: ${width}; height: ${height || width}; line-height: ${height || width};">
                        <title>${symbol}</title>
                        <use xlink:href="${window.Icons[symbol]}"></use>
                    </svg>
                </i>`;
    }

    window.translationWithParameters = function(translation, parameters) {
        parameters.forEach((parameter, i) => {
            translation = translation.replace(`{${i}}`, parameter);
        });
        return translation;
    }

    enableAutocomplete({
        searchClient: searchClient,
        productsIndex: productsIndex,
        categoriesIndex: categoriesIndex,
        searchPageRoot: searchPageRoot,
        SBColorFilterAndOrderMen: SBColorFilterAndOrderMen,
        SBColorFilterAndOrderWom: SBColorFilterAndOrderWom,
        categoryMen: categoryMen,
        categoryWom: categoryWom,
        isVisibleEnabled: isVisibleEnabled,
        isAvailableEnabled: isAvailableEnabled,
        currentLanguage: currentLanguage,
        currentLocale: currentLocale,
    });

    // FIXME: only enable on search and category page
    if (isFirstLevelDigital == 'false') {
        enableInstantSearch({
            searchClient: searchClient,
            productsIndex: productsIndex,
            productsIndexPriceAsc: productsIndexPriceAsc,
            productsIndexPriceDesc: productsIndexPriceDesc,
            urlQuery: urlQuery,
            categoryDisplayNamePath: categoryDisplayNamePath,
            categoryDisplayNamePathSeparator: categoryDisplayNamePathSeparator,
            cgid: cgid,
            userCurrency: userCurrency,
            userCurrencySymbol: userCurrencySymbol,
            colorDisplayName: colorDisplayName,
            wishlistIds: wishlistIds,
            searchPageRoot: searchPageRoot,
            digitalLookBookLink: digitalLookBookLink,
            isVisibleEnabled: isVisibleEnabled,
            isAvailableEnabled: isAvailableEnabled,
            categoryGender: categoryGender,
            isDigital: isDigital,
            deduplicateCategory: deduplicateCategory,
        });
    }

    if (algoliaData.enableInsights) {
        enableInsights(algoliaData.applicationID, algoliaData.searchApiKey, algoliaData.productsIndex);
    }

    if(cgidSeason) {
        getPlpDetails(
            {
                searchClient: searchClient,
                productsIndex: productsIndex,
                cgid: cgidSeason,
            }
        );
    }
});
